{"version":3,"file":"static/js/940.a8a72f7d.chunk.js","mappings":"+RACMA,EAAU,mCAChBC,IAAAA,SAAAA,QAAA,+BACO,IAAMC,EAAiB,WAC5B,OAAOD,IAAAA,IAAU,oBAAqB,CACpCE,OAAQ,CACNC,QAASJ,MAKFK,EAAoB,SAAAC,GAC/B,OAAOL,IAAAA,IAAU,gBAAiB,CAChCE,OAAQ,CACNC,QAASJ,EACTO,MAAOD,MAKAE,EAAe,SAAAC,GAC1B,OAAOR,IAAAA,IAAA,iBAAoBQ,GAAW,CACpCN,OAAQ,CACNC,QAASJ,MAKFU,EAAe,SAAAD,GAC1B,OAAOR,IAAAA,IAAA,iBAAoBQ,EAApB,YAAuC,CAC5CN,OAAQ,CACNC,QAASJ,MAKFW,EAAe,SAAAF,GAC1B,OAAOR,IAAAA,IAAA,iBAAoBQ,EAApB,YAAuC,CAC5CN,OAAQ,CACNC,QAASJ,O,qFCnCFY,EAAQ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3BC,GAAWC,EAAAA,EAAAA,MACjB,OACE,yBACE,SAAC,KAAD,CAASC,MAAO,CAAEC,KAAMH,GAAYI,GAAE,kBAAaP,GAAnD,SACGC,GAAgBC,Q,0ICHZM,EAAQ,WACnB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRvB,EAAAA,EAAAA,MAAiBwB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,GAAaI,EAAAA,EAAAA,GAAOD,SACvD,KAGD,iCACE,yCACA,wBACGJ,EAAUM,KAAI,YAA0B,IAAvBhB,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3B,OACE,SAACH,EAAA,EAAD,CAAsBC,GAAIA,EAAIC,MAAOA,EAAOC,KAAMA,IAAtCe,EAAAA,EAAAA,iB,qDCnBjB,IAAMF,EAAS,SAAAD,GACpB,OAAOA,EAAKI,QAAQF,KAClB,kBAA6D,CAC3DhB,GADF,EAAGA,GAEDC,MAFF,EAAOA,MAGLkB,SAHF,EAAcA,SAIZC,UAJF,EAAwBA,UAKtBC,aALF,EAAmCA,aAMjCnB,KANF,EAAiDA,W,sDCD9C,IAkBIe,EAAS,eAACK,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC1B,EAAI2B,GAWvD,OARE3B,IAFF2B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["Service/Service.js","components/Links/Links.jsx","components/Pages/Trends/Trends.jsx","components/utils/Mapper.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'ce11188e46260bdc0ed3140d02ef06fd';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\nexport const fetchTrendings = () => {\n  return axios.get('/trending/all/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchSearchMovies = search => {\n  return axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: search,\n    },\n  });\n};\n\nexport const fetchDetails = movieId => {\n  return axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchCredits = movieId => {\n  return axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchReviews = movieId => {\n  return axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n","import { NavLink } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nexport const Links = ({ id, title, name }) => {\n  const location = useLocation();\n  return (\n    <li>\n      <NavLink state={{ from: location }} to={`/movies/${id}`}>\n        {title ? title : name}\n      </NavLink>\n    </li>\n  );\n};\n\nLinks.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  name: PropTypes.string,\n};\n","import { Links } from \"components/Links/Links\";\nimport { nanoid } from \"nanoid\";\nimport { useState, useEffect } from \"react\";\nimport { fetchTrendings } from \"Service/Service\";\nimport { mapper } from \"components/utils/Mapper\";\n\nexport const Trend = () => {\n  const [trendings, setTrendings] = useState([]);\n\n  useEffect(() => {\n    fetchTrendings().then(({ data }) => setTrendings(mapper(data)));\n  }, []);\n\n  return (\n    <>\n      <h2>Trend Films</h2>\n      <ul>\n        {trendings.map(({ id, title, name }) => {\n          return (\n            <Links key={nanoid()} id={id} title={title} name={name}></Links>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","export const mapper = data => {\n  return data.results.map(\n    ({ id, title, overwiev, genre_ids, vote_average, name }) => ({\n      id,\n      title,\n      overwiev,\n      genre_ids,\n      vote_average,\n      name,\n    })\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_KEY","axios","fetchTrendings","params","api_key","fetchSearchMovies","search","query","fetchDetails","movieId","fetchCredits","fetchReviews","Links","id","title","name","location","useLocation","state","from","to","Trend","useState","trendings","setTrendings","useEffect","then","data","mapper","map","nanoid","results","overwiev","genre_ids","vote_average","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}