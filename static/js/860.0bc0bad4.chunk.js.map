{"version":3,"file":"static/js/860.0bc0bad4.chunk.js","mappings":"oNAGaA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAWA,OACE,+BACE,kBAAMH,SAXW,SAACI,GACpBA,EAAMC,iBACNL,EAASE,IASP,WACE,4BACE,kBAAOI,MAAOJ,EAAQK,SARV,SAACH,GACnBD,EAAUC,EAAMI,OAAOF,QAO4BG,KAAK,YAEpD,6C,2DCnBKC,EAAa,WACxB,OACE,qDAEE,SAAC,KAAD,CAAMC,GAAG,IAAT,6BCIOC,EAAc,WAAO,IAAD,EAC/B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCd,EAAAA,EAAAA,UAAS,MAA7C,eAAOe,EAAP,KAAmBC,EAAnB,KACMC,EAAa,UAAGJ,EAAaK,IAAI,YAApB,QAA4B,IAE/CC,EAAAA,EAAAA,YAAU,WACHF,IAGLG,EAAAA,EAAAA,IAAkBH,GAAeI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OACpCN,GAAcO,EAAAA,EAAAA,GAAOD,SAEtB,CAACL,IAUJ,OACE,iCACE,SAACnB,EAAD,CAAWC,SAVM,SAACE,GACfA,EAILa,EAAgB,CAAEU,EAAGvB,IAHnBwB,EAAAA,GAAAA,MAAY,sBASXV,IACC,8BACyB,IAAtBA,EAAWW,QACV,+BACE,SAACjB,EAAD,OAGF,wBACGM,EAAWY,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC5B,OACE,SAACC,EAAA,EAAD,CAEEH,GAAIA,EACJC,MAAOA,EACPC,KAAMA,IAHDE,EAAAA,EAAAA,mB,6KC7CnBC,EAAU,mCAChBC,IAAAA,SAAAA,QAAA,+BACO,IAAMC,EAAiB,WAC5B,OAAOD,IAAAA,IAAU,oBAAqB,CACpCE,OAAQ,CACNC,QAASJ,MAKFb,EAAoB,SAAAnB,GAC/B,OAAOiC,IAAAA,IAAU,gBAAiB,CAChCE,OAAQ,CACNC,QAASJ,EACTK,MAAOrC,MAKAsC,EAAe,SAAAC,GAC1B,OAAON,IAAAA,IAAA,iBAAoBM,GAAW,CACpCJ,OAAQ,CACNC,QAASJ,MAKFQ,EAAe,SAAAD,GAC1B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,YAAuC,CAC5CJ,OAAQ,CACNC,QAASJ,MAKFS,EAAe,SAAAF,GAC1B,OAAON,IAAAA,IAAA,iBAAoBM,EAApB,YAAuC,CAC5CJ,OAAQ,CACNC,QAASJ,O,qFCnCFF,EAAQ,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3Ba,GAAWC,EAAAA,EAAAA,MACjB,OACE,yBACE,SAAC,KAAD,CAASC,MAAO,CAAEC,KAAMH,GAAYjC,GAAE,kBAAakB,GAAnD,SACGC,GAAgBC,Q,qDCTlB,IAAMP,EAAS,SAAAD,GACpB,OAAOA,EAAKyB,QAAQpB,KAClB,kBAA6D,CAC3DC,GADF,EAAGA,GAEDC,MAFF,EAAOA,MAGLmB,SAHF,EAAcA,SAIZC,UAJF,EAAwBA,UAKtBC,aALF,EAAmCA,aAMjCpB,KANF,EAAiDA,W,sDCD9C,IAkBIE,EAAS,eAACmB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC3B,EAAI4B,GAWvD,OARE5B,IAFF4B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/SearchBar/SearchBar.jsx","components/GoHomePage/GoHomePage.jsx","Pages/MovieSearch/MovieSearch.jsx","Service/Service.js","components/Links/Links.jsx","components/utils/Mapper.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSubmit(search);\n  };\n\n  const handleInput = (event) => {\n    setSearch(event.target.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input value={search} onChange={handleInput} type=\"text\" />\n        </label>\n        <button>submit</button>\n      </form>\n    </>\n  );\n};\n\nSearchBar.propTypes = {\n  SearchBar: PropTypes.func,\n};\n","import { Link } from \"react-router-dom\";\n\nexport const GoHomePage = () => {\n  return (\n    <h1>\n      We cant find youre page\n      <Link to=\"/\">go home pls</Link>\n    </h1>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { SearchBar } from \"components/SearchBar/SearchBar\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { fetchSearchMovies } from \"Service/Service\";\nimport { mapper } from \"components/utils/Mapper\";\nimport { Links } from \"components/Links/Links\";\nimport { nanoid } from \"nanoid\";\nimport { toast } from \"react-toastify\";\nimport { GoHomePage } from \"components/GoHomePage/GoHomePage\";\n\nexport const MovieSearch = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchData, setSearchData] = useState(null);\n  const searchRequest = searchParams.get(\"q\") ?? \"\";\n\n  useEffect(() => {\n    if (!searchRequest) {\n      return;\n    }\n    fetchSearchMovies(searchRequest).then(({ data }) =>\n      setSearchData(mapper(data))\n    );\n  }, [searchRequest]);\n\n  const handleSubmit = (search) => {\n    if (!search) {\n      toast.error(\"Input some Text\");\n      return;\n    }\n    setSearchParams({ q: search });\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit}></SearchBar>\n      {searchData && (\n        <>\n          {searchData.length === 0 ? (\n            <>\n              <GoHomePage />\n            </>\n          ) : (\n            <ul>\n              {searchData.map(({ id, title, name }) => {\n                return (\n                  <Links\n                    key={nanoid()}\n                    id={id}\n                    title={title}\n                    name={name}\n                  ></Links>\n                );\n              })}\n            </ul>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import axios from 'axios';\nconst API_KEY = 'ce11188e46260bdc0ed3140d02ef06fd';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\nexport const fetchTrendings = () => {\n  return axios.get('/trending/all/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchSearchMovies = search => {\n  return axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: search,\n    },\n  });\n};\n\nexport const fetchDetails = movieId => {\n  return axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchCredits = movieId => {\n  return axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchReviews = movieId => {\n  return axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n","import { NavLink } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nexport const Links = ({ id, title, name }) => {\n  const location = useLocation();\n  return (\n    <li>\n      <NavLink state={{ from: location }} to={`/movies/${id}`}>\n        {title ? title : name}\n      </NavLink>\n    </li>\n  );\n};\n\nLinks.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  name: PropTypes.string,\n};\n","export const mapper = data => {\n  return data.results.map(\n    ({ id, title, overwiev, genre_ids, vote_average, name }) => ({\n      id,\n      title,\n      overwiev,\n      genre_ids,\n      vote_average,\n      name,\n    })\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["SearchBar","onSubmit","useState","search","setSearch","event","preventDefault","value","onChange","target","type","GoHomePage","to","MovieSearch","useSearchParams","searchParams","setSearchParams","searchData","setSearchData","searchRequest","get","useEffect","fetchSearchMovies","then","data","mapper","q","toast","length","map","id","title","name","Links","nanoid","API_KEY","axios","fetchTrendings","params","api_key","query","fetchDetails","movieId","fetchCredits","fetchReviews","location","useLocation","state","from","results","overwiev","genre_ids","vote_average","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}